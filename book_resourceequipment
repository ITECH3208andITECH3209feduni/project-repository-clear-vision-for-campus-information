<?php
include 'db.php';
session_start();

if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit();
}

if (!isset($_GET['resource_id']) || !is_numeric($_GET['resource_id'])) {
    echo "Resource not found or invalid request.";
    exit();
}

$resource_id = intval($_GET['resource_id']);
$user_id = $_SESSION['user_id'];

// Initialize variables to avoid "undefined variable" warnings
$start_time = '';
$end_time = '';
$quantity = '';

$sql = "SELECT * FROM resources WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $resource_id);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows == 0) {
    echo "Resource not found or invalid request.";
    exit();
}

$resource = $result->fetch_assoc();
$total_quantity = $resource['quantity'];

$success_message = "";
$delete_message = "";
$error_message = "";

$disabled_dates = [];

$bookings_sql = "SELECT start_time, end_time, SUM(quantity) as total_booked 
                 FROM bookings 
                 WHERE resource_id = ? AND status = 'booked'
                 GROUP BY start_time, end_time";
$stmt = $conn->prepare($bookings_sql);
$stmt->bind_param("i", $resource_id);
$stmt->execute();
$bookings_result = $stmt->get_result();

if ($bookings_result->num_rows > 0) {
    while ($row = $bookings_result->fetch_assoc()) {
        if ($row['total_booked'] >= $total_quantity) {
            $disabled_dates[] = [
                'from' => $row['start_time'],
                'to' => $row['end_time']
            ];
        }
    }
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Reset messages
    $success_message = "";
    $delete_message = "";
    $error_message = "";

    $start_time = $_POST['start_time'] ?? '';
    $end_time = $_POST['end_time'] ?? '';
    $quantity = $_POST['quantity'] ?? '';

    if (empty($start_time) || empty($end_time) || empty($quantity)) {
        $error_message = "Start time, end time, and quantity are required.";
    } else {
        $requested_quantity = min(3, intval($quantity)); // Maximum of 3 units per booking
        
        if (strtotime($end_time) <= strtotime($start_time)) {
            $error_message = "End time must be after start time.";
        } elseif ((strtotime($end_time) - strtotime($start_time)) < 3600) {
            $error_message = "Booking must be for at least one hour.";
        } else {
            // Convert start and end times to Unix timestamps
            $start_timestamp = strtotime($start_time);
            $end_timestamp = strtotime($end_time);

            // Get the day of the week for start and end times (1 for Monday, 7 for Sunday)
            $start_day = date('N', $start_timestamp);
            $end_day = date('N', $end_timestamp);

            $is_valid = false;

            // Check if the booking is valid
            if ($start_day >= 1 && $start_day <= 4) { // Monday to Thursday
                if ($end_day > 5) { // End day must not be after Friday
                    $error_message = "Weekday bookings must end by Friday.";
                } elseif (($end_timestamp - $start_timestamp) > 2 * 86400) { // Maximum of 2 days
                    $error_message = "Weekday bookings can only be for a maximum of 2 days.";
                } else {
                    $is_valid = true; // Valid weekday booking
                }
            } elseif ($start_day == 5) { // Friday
                if ($end_day != 1 && $end_day != 5) { // End day must be either Friday or Monday
                    $error_message = "Weekend bookings must end on Monday.";
                } elseif (($end_timestamp - strtotime($start_time)) > 3 * 86400) { // Maximum of 3 days
                    $error_message = "Weekend bookings can only be for a maximum of 3 days.";
                } else {
                    $is_valid = true; // Valid weekend booking
                }
            } elseif ($start_day == 6 || $start_day == 7) { // Saturday or Sunday
                $error_message = "New bookings cannot start on Saturday or Sunday.";
            }

            if ($is_valid) {
                // Check if the user already has an overlapping booking for the same resource
                $overlapping_user_booking_sql = "SELECT COUNT(*) as overlap_count FROM bookings 
                                                  WHERE user_id = ? AND resource_id = ? 
                                                  AND (
                                                      (start_time <= ? AND end_time > ?) OR
                                                      (start_time < ? AND end_time >= ?) OR
                                                      (start_time >= ? AND end_time <= ?)
                                                  ) AND status = 'booked'";
                $stmt = $conn->prepare($overlapping_user_booking_sql);
                $stmt->bind_param("iissssss", $user_id, $resource_id, $start_time, $start_time, $end_time, $end_time, $start_time, $end_time);
                $stmt->execute();
                $overlap_check_result = $stmt->get_result();
                $overlap_count = $overlap_check_result->fetch_assoc()['overlap_count'];

                if ($overlap_count > 0) {
                    $error_message = "You already have a booking for this resource during the selected time slot.";
                } else {
                    // Check for consecutive bookings
                    $consecutive_check_sql = "SELECT COUNT(*) as consecutive_count FROM bookings 
                                              WHERE user_id = ? AND resource_id = ?
                                              AND (
                                                  (DATE(start_time) = DATE(?) - INTERVAL 1 DAY)
                                                  OR (DATE(end_time) = DATE(?) + INTERVAL 1 DAY)
                                              )";
                    $stmt = $conn->prepare($consecutive_check_sql);
                    $stmt->bind_param("iiss", $user_id, $resource_id, $start_time, $end_time);
                    $stmt->execute();
                    $consecutive_check_result = $stmt->get_result();
                    $consecutive_count = $consecutive_check_result->fetch_assoc()['consecutive_count'];

                    if ($consecutive_count > 0) {
                        $error_message = "You cannot book the same resource for consecutive days.";
                    } else {
                        // Check total booked quantity for overlapping bookings
                        $overlap_check_sql = "SELECT SUM(quantity) as booked_quantity FROM bookings 
                                              WHERE resource_id = ? AND status = 'booked'
                                              AND (
                                                  (start_time <= ? AND end_time > ?) OR
                                                  (start_time < ? AND end_time >= ?) OR
                                                  (start_time >= ? AND end_time <= ?)
                                              )";
                        $stmt = $conn->prepare($overlap_check_sql);
                        $stmt->bind_param("issssss", $resource_id, $start_time, $start_time, $end_time, $end_time, $start_time, $end_time);
                        $stmt->execute();
                        $overlap_check_result = $stmt->get_result();
                        $booked_quantity = $overlap_check_result->fetch_assoc()['booked_quantity'] ?? 0;

                        $available_quantity = $total_quantity - $booked_quantity;

                        if ($available_quantity < $requested_quantity) {
                            $error_message = "Only $available_quantity unit(s) available for the selected time slot.";
                        } else {
                            // Proceed with booking
                            $booking_sql = "INSERT INTO bookings (resource_id, user_id, start_time, end_time, status, quantity) 
                                            VALUES (?, ?, ?, ?, 'booked', ?)";
                            $stmt = $conn->prepare($booking_sql);
                            $stmt->bind_param("iissi", $resource_id, $user_id, $start_time, $end_time, $requested_quantity);
                            if ($stmt->execute()) {
                                $success_message = "Booking successful!";
                                echo "<script>
                                        setTimeout(function() {
                                            window.location.href = 'index.php?resource_id=$resource_id';
                                        }, 1500); // Redirect after 2 seconds
                                      </script>";
                            } else {
                                $error_message = "Error: " . $stmt->error;
                            }
                        }
                    }
                }
            }
        }
    }
}

// Handle delete action
if (isset($_POST['delete_booking']) && isset($_POST['booking_id']) && is_numeric($_POST['booking_id'])) {
    // Reset messages before deletion
    $error_message = "";
    $success_message = "";

    $booking_id = intval($_POST['booking_id']);
    $delete_sql = "DELETE FROM bookings WHERE id = ? AND user_id = ?";
    $stmt = $conn->prepare($delete_sql);
    $stmt->bind_param("ii", $booking_id, $user_id);
    if ($stmt->execute()) {
        $delete_message = "Booking deleted successfully!";
    } else {
        $error_message = "Error deleting booking: " . $stmt->error;
    }
}

// Fetch only the logged-in user's bookings
$bookings_sql = "SELECT b.id, u.name, b.start_time, b.end_time, b.user_id, b.quantity
                 FROM bookings b 
                 JOIN users u ON b.user_id = u.id 
                 WHERE b.resource_id = ? AND b.user_id = ? AND b.status = 'booked'";
$stmt = $conn->prepare($bookings_sql);
$stmt->bind_param("ii", $resource_id, $user_id);
$stmt->execute();
$bookings_result = $stmt->get_result();
$booked_slots = [];
if ($bookings_result->num_rows > 0) {
    while($booking = $bookings_result->fetch_assoc()) {
        $booked_slots[] = $booking;
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book Resource</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <style>
        .animated-popup {
            z-index: 10000 !important; /* Ensure it stays on top of all content */
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h1>Book Resource: <?php echo htmlspecialchars($resource['name']); ?></h1>
        <?php if (!empty($delete_message)): ?>
            <div class="message success"><?php echo htmlspecialchars($delete_message); ?></div>
        <?php elseif (!empty($error_message)): ?>
            <div class="message error"><?php echo htmlspecialchars($error_message); ?></div>
        <?php elseif (!empty($success_message)): ?>
            <div class="message success"><?php echo htmlspecialchars($success_message); ?></div>
        <?php endif; ?>
        <form method="POST" action="">
            <div class="form-group">
                <label for="start_time">Start Time:</label>
                <input type="text" id="start_time" name="start_time" required value="<?php echo htmlspecialchars($start_time); ?>">
            </div>
            <div class="form-group">
                <label for="end_time">End Time:</label>
                <input type="text" id="end_time" name="end_time" required value="<?php echo htmlspecialchars($end_time); ?>">
            </div>
            <div class="form-group">
                <label for="quantity">Quantity (Max 3):</label>
                <input type="number" id="quantity" name="quantity" min="1" max="3" required value="<?php echo htmlspecialchars($quantity); ?>">
            </div>
            <button type="submit" class="btn">Book</button>
        </form>
        <h2>Your Booked Slots:</h2>
        <table class="booked-slots-table">
            <thead>
                <tr>
                    <th>Start Date/Time</th>
                    <th>End Date/Time</th>
                    <th>Quantity</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach($booked_slots as $slot): ?>
                    <tr>
                        <td><?php echo htmlspecialchars($slot['start_time']); ?></td>
                        <td><?php echo htmlspecialchars($slot['end_time']); ?></td>
                        <td><?php echo htmlspecialchars($slot['quantity']); ?></td>
                        <td>
                            <form method="POST" action="">
                                <input type="hidden" name="booking_id" value="<?php echo intval($slot['id']); ?>">
                                <button type="submit" class="btn delete-btn" name="delete_booking">Delete</button>
                            </form>
                        </td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- For pop-up dialogues -->

<script>
document.addEventListener('DOMContentLoaded', function () {
    const maxWeekdayBookingDays = 2; // Maximum 2 days for weekday bookings
    const maxWeekendBookingDays = 3; // Maximum 3 days for weekend bookings
    const minBookingDuration = 60 * 60 * 1000; // Minimum booking duration is 1 hour in milliseconds

    function showBookingInfo(message) {
        Swal.fire({
            icon: 'info',
            title: 'Booking Guidance',
            text: message,
            confirmButtonText: 'Got it!',
            position: 'center',
            customClass: {
                popup: 'animated-popup'
            },
            showClass: {
                popup: 'animate__animated animate__fadeInDown'
            },
            hideClass: {
                popup: 'animate__animated animate__fadeOutUp'
            },
            backdrop: true, // Ensures it stays on top of all content
        });
    }

    function configureEndDatePicker(startDate) {
        let maxDays;
        let minEndDate = new Date(startDate.getTime());
        let message = "";

        if (startDate.getDay() >= 1 && startDate.getDay() <= 4) { // Monday to Thursday
            maxDays = maxWeekdayBookingDays;
            message = "You selected a weekday. You can book this resource for up to 2 days, but your booking must end by Friday.";
        } else if (startDate.getDay() === 5) { // Friday
            maxDays = maxWeekendBookingDays;
            message = "You selected Friday. You can book this resource for up to 3 days, but your booking must end by Monday.";
        } else if (startDate.getDay() === 6 || startDate.getDay() === 0) { // Saturday or Sunday
            message = "Bookings cannot start on weekends. Please select a weekday as the start date.";
            showBookingInfo(message); // Show the pop-up immediately for weekend selections
            return; // Do not proceed if the start date is on Saturday or Sunday
        }

        // Show the message and set up the end date picker
        showBookingInfo(message);

        const maxEndDate = new Date(startDate.getTime());
        maxEndDate.setDate(startDate.getDate() + maxDays);
        minEndDate.setTime(minEndDate.getTime() + minBookingDuration); // At least one hour booking

        flatpickr("#end_time", {
            enableTime: true,
            dateFormat: "Y-m-d H:i",
            minDate: minEndDate,
            maxDate: maxEndDate,
            disable: [], // No disabled dates
            onClose: function(selectedDates, dateStr, instance) {
                instance.close(); // Close the calendar after selecting the end date
            }
        });
    }

    // Initialize Flatpickr for start date
    flatpickr("#start_time", {
        enableTime: true,
        dateFormat: "Y-m-d H:i",
        minDate: "today",
        disable: [], // No disabled dates
        onChange: function (selectedDates, dateStr, instance) {
            if (selectedDates.length > 0) {
                configureEndDatePicker(selectedDates[0]);
                instance.close(); // Close the calendar after selecting the start date
            }
        }
    });
});
</script>

</body>
</html>

